---

- name: 1 Is MW dir present?
  stat:
    path: '{{ mediawiki_path }}/maintenance'
  register: stat_mediawiki_repo

- name: 2 print stat_mediawiki_repo
  debug:
    msg: '{{ stat_mediawiki_repo }}'

- name: 3 Clone mediawiki
  git:
    repo: 'https://gerrit.wikimedia.org/r/p/mediawiki/core.git'
    dest: '{{ mediawiki_path }}'
    version: "{{ mediawiki_version|default('HEAD') }}"
    depth: 1
    force: yes
  when: not stat_mediawiki_repo.stat.exists

- name: 4 Create wiki db 
  mysql_db:
    name: '{{ mediawiki_db.name }}'
    login_unix_socket: '/var/run/mysqld/mysqld.sock'

- name: 5 Create database user
  mysql_user:
    name: '{{ mediawiki_db.user }}'
    password: '{{ mediawiki_db.pwd }}'
    priv: '{{ mediawiki_db.name }}.*:ALL'
    login_unix_socket: '/var/run/mysqld/mysqld.sock'
  ignore_errors: yes

- name: 6 Is LocalSettings.php present?
  stat:
    path: '{{ mediawiki_path }}/LocalSettings.php'
  register: stat_LocalSettings

- name: 7 Discard old LocalSettings
  file:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    state: absent
  when: stat_LocalSettings

- name: 8 Install mediawiki
  command: php {{ mediawiki_path }}/maintenance/install.php
    --dbname {{ mediawiki_db.name | quote }}
    --dbuser {{ mediawiki_db.user | quote }}
    --dbpass {{ mediawiki_db.pwd | quote }}
    --dbtype {{ mediawiki_db.connection | quote }}
    --lang {{ mediawiki_language | quote }}
    --pass {{ admin_user.pwd | quote }}
    --scriptpath {{ mw_script_path | quote }}
    --server {{ vm_url | quote }}
    {{ mw_instance_name | quote }} {{ admin_user.name | quote }}
  args:
    creates: '{{ mediawiki_path }}/LocalSettings.php'

- name: runJobs every minute
  cron:
    name: "run MW jobs"
    minute: "*/1"
    job: ' /usr/bin/php {{ mediawiki_path }}/maintenance/runJobs.php --maxtime=3600  > /dev/null'

# LocalSettings

- name: LocalSettings Email
  replace:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    regexp: '\"\w.+\@\w.+\"\;'
    replace: '"{{ mw_admin_email }}";'

- name: Logo copy
  copy:
    src: '{{ mw_logo }}'
    dest: '{{ mediawiki_path }}/resources/assets/wiki.png'
    owner: www-data
    group: www-data
  when: mw_logo|length > 1

- name: Settings in LocalSetting.php
  blockinfile:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    insertafter: EOF
    block: |
        # Job are run by cron
        $wgJobRunRate = 0;
        # Permissions
        $wgGroupPermissions['*']['read'] = false;
        $wgGroupPermissions['*']['edit'] = false;
        $wgGroupPermissions['user']['edit'] = true;
        $wgGroupPermissions['*']['createaccount'] = false;
        # uploads
        $wgEnableUploads = true;
        $wgUseImageMagick = true;
        $wgImageMagickConvertCommand = "/usr/bin/convert";
        $wgFileExtensions = array( 'pdf', 'png', 'gif', 'jpg', 'jpeg', 'svg', 'pdf', 'mp4', 'mp3' );
        $wgAllowExternalImages = true;
        $wgMaxUploadSize = 20971520;  # 20Mb;
        $wgUploadSizeWarning = 20971520;
        $wgAllowCopyUploads = true;
        $wgGroupPermissions['user']['upload_by_url'] = true; # Uploading directly from a URL
        $wgCopyUploadsFromSpecialUpload = true;
        # Debug
        $wgShowExceptionDetails=true;
        $wgShowSQLError=true;
        $wgShowDBErrorBacktrace=true;
        error_reporting(-1);
        ini_set('display_errors',1);

- name: write permissions to images/
  file:
    path: '{{ mediawiki_path }}/images'
    state: directory
    mode: a+rw
    recurse: yes

- name: Change /etc/php/7.3/fpm/php.ini post_max_size size
  lineinfile:
    path: /etc/php/7.3/fpm/php.ini
    regexp: '^post_max_size'
    line: post_max_size = 20M

- name: Change /etc/php/7.3/fpm/php.ini upload_max_filesize size
  lineinfile:
    path: /etc/php/7.3/fpm/php.ini
    regexp: '^upload_max_filesize'
    line: upload_max_filesize = 20M
  notify: 
    - restart_php 
    - restart_webserver

# extensions - Bundle

- name: Enable MW Pre-Bundled Extensions
  lineinfile:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    insertafter: EOF
    line: "# {{ item.ext_name }}\n{{ item.load_strs | join('\n') }}\n"
  with_items:
    - '{{ extensions_bundled }}'

# extensions - Composer

- name: Install Composer Extensions
  command:
    cmd: composer require {{ item.composer_cmd }} --update-no-dev --quiet
    chdir: '{{ mediawiki_path }}'
  with_items:
    - '{{ extensions_composer }}'

- name: Enable Composer Extensions
  lineinfile:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    insertafter: 'EOF'
    line: "# {{ item.ext_name }}\n{{ item.load_strs | join('\n') }}\n"
    state: present
  with_items:
    - '{{ extensions_composer }}'
  notify: update_mw

# extensions - git


- name: Install Git Extensions
  git:
    repo: '{{ item.repo }}'
    dest: '{{ item.dest }}'
    version: '{{ item.version }}'
    depth: 1
    force: yes
  with_items: '{{ extensions_git }}'
  when: item.enable | bool
  tags: git_ext

- name: Enable Git Extensions
  lineinfile:
    path: '{{ mediawiki_path }}/LocalSettings.php'
    insertafter: EOF
    line: "# {{ item.ext_name }}\n{{ item.load_strs | join('\n') }}\n"
  with_items: '{{ extensions_git }}'
  when: item.enable | bool
  notify: update_mw
  tags: git_ext



# skin
